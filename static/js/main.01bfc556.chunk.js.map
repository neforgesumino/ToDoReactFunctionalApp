{"version":3,"sources":["Components/Context/ContextTasks.jsx","Components/Menu/LocalStorageCRUD.js","constants.js","Components/ContainerTasks/CardTask/CardTask.jsx","Components/ContainerTasks/ToDo/ToDo.jsx","Components/Menu/Modal/ModalNewTask.jsx","Components/Menu/Menu.jsx","Components/NavBar/NavBar.jsx","Components/Views/OptionNavbarComponents.jsx","Components/Views/TodoTasksView.jsx","Components/ContainerTasks/Done/Done.jsx","Components/Views/DoneTasksView.jsx","Components/Views/PrincipalView.jsx","App.js","serviceWorker.js","index.js"],"names":["TasksContext","createContext","TasksContextProvider","children","useState","show","setShow","allTasks","setAllTasks","Provider","value","getTasks","tasks","localStorage","getItem","taskArray","allTasksString","split","join","task","push","JSON","parse","sort","a","b","firstTitle","title","toLowerCase","secondTitle","console","log","getAllMatchesTasks","query","allMatches","filter","Object","keys","every","key","update","taskIndex","findIndex","newTaskArray","taskItem","stringify","setItem","toString","CardTask","color","setColor","useEffect","status","deleteTaskSelected","splice","deleteTask","window","location","reload","className","id","onClick","width","height","viewBox","fill","xmlns","d","fillRule","description","storyPoints","ToDoList","toDoTasks","length","map","role","ModalNewTask","useContext","infoTemplate","infoModal","setInfoModal","isTitleSelected","setTitleSelected","isDescriptionSelected","setDescriptionSelected","isStoryPointsSelected","setStoryPointsSelected","updateElement","element","keyElement","save","validationSubmit","alert","saveTask","Modal","onHide","backdrop","keyboard","Header","closeButton","Title","Body","htmlFor","onChange","e","target","toUpperCase","type","checkDescriptionSelected","checkStoryPointsSelected","Button","variant","Menu","history","useHistory","data-toggle","data-target","NavBar","OptionsNavbarComponents","TodoList","ToDo","DoneList","doneTasks","DoneTaskView","Done","PrincipalView","App","exact","path","component","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.01bfc556.chunk.js","sourcesContent":["\nimport React, { createContext, useState } from 'react'\n\nexport const TasksContext = createContext();\n\nexport const TasksContextProvider = ({ children }) => {\n  const [show, setShow] = useState(false);\n  const [allTasks, setAllTasks] = useState([]);\n\n  return (\n    <TasksContext.Provider value={{ show, setShow, allTasks, setAllTasks }}>\n      {children}\n    </TasksContext.Provider>\n  );\n}\n","import { LOCAL_STORAGE_KEY } from '../../constants'\n/**\n * This function is to save a single task inside localstorage\n * All the information is being saved with a key named allTasks\n * @param task requested\n */\nexport const saveTask = (task) => {\n  let allTasks = localStorage.getItem(LOCAL_STORAGE_KEY);\n  // if the localstorage is empty, then create a new array of string and save it.\n  if (!allTasks) {\n    allTasks = [JSON.stringify(task)];\n    localStorage.setItem(LOCAL_STORAGE_KEY, allTasks);\n  } else {\n    // if not, get all the tasks as an array\n    allTasks = [allTasks];\n    //save the new element as part of the array of allTasks.\n    allTasks.push(JSON.stringify(task));\n    localStorage.setItem(LOCAL_STORAGE_KEY, allTasks.toString());\n  }\n}\n\n/**\n * This function is to get all the tasks as an sorted array of elements.\n * If there are not elements, will return an empty array.\n * Otherwise, will return a sorted array with all the elements.\n */\nexport const getTasks = () => {\n  let tasks = localStorage.getItem(LOCAL_STORAGE_KEY);\n  let taskArray = []\n  if (!tasks) {\n    console.log(\"there is no elements\");\n  } else {\n    // instead of split by }, for every match of that pattern, will change to }% to get a unique identifier.\n    tasks = tasks.split(\"},\").join(\"}%\")\n    // get all the JSON's with every time that find a %\n    const allTasksString = tasks.split('%')\n    // as allTaskString is an array of string, based on that, I'll save an array of JSON's.\n    for (let task of allTasksString) {\n      taskArray.push(JSON.parse(task));\n    }\n    // sort the array\n    taskArray.sort((a, b) => {\n      const firstTitle = a.title.toLowerCase();\n      const secondTitle = b.title.toLowerCase();\n      return (firstTitle < secondTitle) ? -1 : (firstTitle > secondTitle) ? 1 : 0;\n    });\n  }\n  return taskArray;\n}\n\n/**\n * This function is to get all the matches based on a query.\n * If there are no matches, will return an empty array\n * Otherwise, will return an array with all the matches\n * This avoid create different methods to search based on different parameters.\n * and add scalability\n * @param query is a json with the parameter to search. example: { status: 'DONE'}\n */\nexport const getAllMatchesTasks = (query) => {\n  // we need to get all the tasks already saved\n  const tasks = getTasks();\n  // here, we filter all the tasks based on the query param\n  const allMatches = tasks.filter((task) => {\n    // get all the keys of the query json, ex: ['title', 'status']\n    const keys = Object.keys(query);\n    // check if all the values of search parameters match with the values of the task, example:\n    //'title'=> task.title === query.title\n    // 'status' => task.status === query.status\n    const isMatch = keys.every((key) => task[key] === query[key]);\n    return isMatch;\n  });\n  // sort the results\n  allMatches.sort((a, b) => {\n    const firstTitle = a.title.toLowerCase();\n    const secondTitle = b.title.toLowerCase();\n    return (firstTitle < secondTitle) ? -1 : (firstTitle > secondTitle) ? 1 : 0;\n  });\n  return allMatches;\n}\n\n/**\n * This function is to get the first match based on a query.\n * If there are no matches, will return undefined\n * Otherwise, will return the first element matched\n * This avoid create different methods to search based on different parameters.\n * and add scalability\n * @param query is a json with the parameter to search. example: { status: 'DONE'}\n */\nexport const getOneMatchTask = (query) => {\n  //get all the task saved\n  const tasks = getTasks();\n  // the same than getAllMatchesTasks but instead of use filter, use find \n  // and it makes that finish in the moment that find the first match\n  return tasks.find((task) => Object.keys(query).every((key) => task[key] === query[key]));\n}\n/**\n/**This function is to update an element based in a query and update parameters\n * This avoid create different methods to update based on different parameters.\n * and add scalability\n * @param {*} query is a json with the parameter to search. example: { title: 'firstTask', status: 'DONE'}\n * @param {*} update is a json with the parameter to update. example: { status: 'TO DO'}\n */\nexport const update = (query, update) => {\n  // get all the task\n  const tasks = getTasks();\n  // get the index of the array of task where match with the query\n  // this is the task to update\n  const taskIndex = tasks.findIndex((task) => Object.keys(query).every((key) => task[key] === query[key]));\n  // if taskIndex = -1, it means that there is not the task searched.\n  // and return false that means that it doesn't update nothing.\n  if (taskIndex === -1) {\n    return false;\n  }\n  // Otherwise, get the element in that index.\n  let task = tasks[taskIndex];\n  // iterates in every key of the update json to update all the parameters\n  for (let key of Object.keys(update)) {\n    // if the key of the json update is not a key that already exist in the task\n    // return false that means that it doesn't update nothing.\n    if (!task[key]) {\n      return false;\n    }\n    // Otherwise, update the key\n    task[key] = update[key]\n  }\n  // set the task updated before as the new json that replaces the old json\n  tasks[taskIndex] = task;\n  //create the new array to save with the updated task\n  let newTaskArray = []\n  for (let taskItem of tasks) {\n    // convert all the jsons in the array in a json string.\n    newTaskArray.push(JSON.stringify(taskItem));\n  }\n  // save in the localstorage as string\n  localStorage.setItem(LOCAL_STORAGE_KEY, newTaskArray.toString());\n  // return true that means that it updated the task.\n  return true;\n}\n\n/**\n * This function is to delete all the tasks\n */\nexport const deleteAllTasks = () => {\n  localStorage.removeItem(LOCAL_STORAGE_KEY);\n}\n\n/**\n * This function is to delete a task based on a query\n * if we add a delete button, this function is very helpful\n * This avoid create different methods to delete based on different parameters.\n * and add scalability\n * @param query is a json with the parameter to search. example: { title: 'firstTask', status: 'DONE'}\n */\nexport const deleteTask = (query) => {\n  // get all the tasks\n  const tasks = getTasks();\n  // get the index of the array of task where match with the query\n  // this is the task to delete\n  const taskIndex = tasks.findIndex((task) => Object.keys(query).every((key) => task[key] === query[key]));\n  // if taskIndex = -1, it means that there is not the task searched.\n  // and return false that means that it doesn't delete nothing.\n  if (taskIndex === -1) {\n    console.log('is not possible delete an unexisting item!')\n    return false;\n  }\n  // Otherwise, delete the task in the position found before\n  tasks.splice(taskIndex, 1);\n  //create the new array to save with the deleted task\n  let newTaskArray = []\n  for (let taskItem of tasks) {\n    // convert all the jsons in the array in a json string.\n    newTaskArray.push(JSON.stringify(taskItem));\n  }\n  // save in the localstorage as string\n  localStorage.setItem(LOCAL_STORAGE_KEY, newTaskArray.toString());\n  // return true that means that it deleted the task.\n  return true;\n}\n","export const STATUS_TO_DO = 'TO DO'\nexport const STATUS_DONE = 'DONE';\nexport const LOCAL_STORAGE_KEY = 'allTasks';\nexport const TITLE = 'title'\nexport const DESCRIPTION = 'description'\nexport const STORY_POINTS = 'storyPoints'\n","import React, { useState, useEffect } from 'react';\nimport { update, deleteTask } from './../../Menu/LocalStorageCRUD'\nimport { STATUS_DONE, STATUS_TO_DO } from './../../../constants'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './Cardtask.css'\n\nfunction CardTask({ task }) {\n  const [color, setColor] = useState('text-secondary');\n  useEffect(() => {\n    if (task.status === STATUS_DONE) {\n      setColor('text-success');\n\n    } else {\n      setColor('text-secondary');\n    }\n  }, [])\n\n  const changeStatus = () => {\n    if (task.status === STATUS_DONE) {\n      update(task, { status: STATUS_TO_DO });\n      window.location.reload(0);\n    }\n    if (task.status === STATUS_TO_DO) {\n      update(task, { status: STATUS_DONE });\n      window.location.reload(0);\n    }\n  }\n\n  const deleteTaskSelected = () => {\n    deleteTask(task);\n    window.location.reload(0);\n  }\n\n  return (\n    <>\n      <div className=\"card  text-center \">\n\n        <div id=\"titleHeader\" className=\"container card-header p-0\">\n          <div className=\"row\">\n            <div className=\"col-8 \">\n              <p id=\"itemTaskTitle\" className=\"badge card-title  text-justify text-break my-0 font-weight-bolder text-secondary p-0\">\n                {task.title}</p>\n            </div>\n            <div className=\"col-4 p-0\">\n              <button id='btnSvgDelete' className='btn p-0' onClick={() => deleteTaskSelected()}>\n                <span>\n                  <svg\n                    width=\"1em\"\n                    height=\"1em\"\n                    viewBox=\"0 0 16 16\"\n                    className=\"bi bi-trash text-danger p-0\"\n                    fill=\"currentColor\"\n                    xmlns=\"http://www.w3.org/2000/svg\">\n                    <path d=\"M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z\" />\n                    <path fillRule=\"evenodd\" d=\"M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4L4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z\" />\n                  </svg>\n                </span>\n              </button>\n            </div>\n          </div>\n        </div>\n        <div className=\" container card-body py-0 \">\n\n          <div className='row' id='rowContainerBodyCard'>\n            <div className='col-12 align-baseline'>\n              <p className=\"card-title text-break  text-left font-italic  font-weight-normal text-secondary mb-0\">\n                {task.description}\n              </p>\n            </div>\n\n          </div>\n\n          <div className='row mt-3 pb-2' id='rowContainerfooterCard'>\n\n            <div className='col-3 p-0'>\n              <div className=\"badge badge-secondary text-wrap botonStoryPoints\" >\n                {task.storyPoints}\n              </div>\n            </div>\n            <div className='col-9 p-0 m-0 text-left'>\n              <p className='m-0'>Praise Points</p>\n            </div>\n          </div>\n\n          <div className='row'>\n            <div className='col-3 p-0'>\n              <button id='btnSvg' className='btn p-0' onClick={() => changeStatus()}>\n                <span>\n                  <svg\n                    width=\"1.5em\"\n                    height=\"1.5em\"\n                    viewBox=\"0 0 16 16\"\n                    className={`bi bi-check2-square ${color}`}\n                    fill=\"currentColor\"\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    id={\"svgCheck\"}>\n                    <path fillRule=\"evenodd\" d=\"M15.354 2.646a.5.5 0 0 1 0 .708l-7 7a.5.5 0 0 1-.708 0l-3-3a.5.5 0 1 1 .708-.708L8 9.293l6.646-6.647a.5.5 0 0 1 .708 0z\" />\n                    <path fillRule=\"evenodd\" d=\"M1.5 13A1.5 1.5 0 0 0 3 14.5h10a1.5 1.5 0 0 0 1.5-1.5V8a.5.5 0 0 0-1 0v5a.5.5 0 0 1-.5.5H3a.5.5 0 0 1-.5-.5V3a.5.5 0 0 1 .5-.5h8a.5.5 0 0 0 0-1H3A1.5 1.5 0 0 0 1.5 3v10z\" />\n                  </svg>\n                </span>\n              </button>\n\n            </div>\n            <div className='col-9 p-0 align-bottom '>\n              <p className='m-0 text-left'>\n                Mark as done </p>\n\n\n            </div>\n\n          </div>\n\n\n\n\n\n\n        </div>\n      </div >\n    </>\n  );\n}\n\nexport default CardTask;\n","import React from 'react';\nimport { getAllMatchesTasks } from '../../Menu/LocalStorageCRUD'\nimport { STATUS_TO_DO } from '../../../constants'\nimport CardTask from '../CardTask/CardTask'\n\n\nfunction ToDoList() {\n\n  const toDoTasks = getAllMatchesTasks({ status: STATUS_TO_DO })\n\n  return (\n    <>\n\n      <div className='row col-6 bg-light py-1 mt-4 mr-2 titleTask ' >\n        <h1 className='lead'> TO DO</h1>\n      </div>\n      <div className=\"container mt-4 m-0 \">\n        <div className='row '>\n          {\n            toDoTasks.length > 0 && toDoTasks.map(task => (\n              <div key={task.title} className='col-sm-12 col-md-6 col-lg-6 col-xl-6 mt-3 '>\n                <CardTask task={task} />\n              </div>\n\n            ))\n          }\n        </div>\n      </div>\n\n\n      {\n        toDoTasks.length === 0 && (\n          <div className=\"alert alert-warning \" role=\"alert\">\n            <b>TO DO</b> section is empty!\n          </div>\n        )\n      }\n    </>\n  );\n}\n\nexport default ToDoList;\n","import React, { useContext, useState } from 'react';\nimport './ModalNewTask.css'\nimport { TasksContext } from '../../Context/ContextTasks'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Button, Modal } from 'react-bootstrap';\nimport { saveTask } from './../LocalStorageCRUD'\nimport { STATUS_TO_DO, TITLE, DESCRIPTION, STORY_POINTS } from './../../../constants'\n\nfunction ModalNewTask() {\n  const { show, setShow } = useContext(TasksContext);\n  let infoTemplate = { title: '', description: '', storyPoints: '', status: STATUS_TO_DO };\n\n  const [infoModal, setInfoModal] = useState(infoTemplate);\n  const [isTitleSelected, setTitleSelected] = useState(false);\n  const [isDescriptionSelected, setDescriptionSelected] = useState(false);\n  const [isStoryPointsSelected, setStoryPointsSelected] = useState(false);\n  const handleClose = () => setShow(false);\n\n  const updateElement = (element) => {\n    const keyElement = Object.keys(element)\n    if (keyElement[0] === 'title') {\n      setTitleSelected(true)\n    } else if (keyElement[0] === 'description') {\n      setDescriptionSelected(true)\n    } else if (keyElement[0] === 'storyPoints') {\n      setStoryPointsSelected(true)\n    }\n    for (let key of Object.keys(infoModal)) {\n      if (keyElement[0] === key && element[key]) {\n        infoTemplate[key] = element[key];\n      } else if (keyElement[0] === key && !element[key]) {\n        infoTemplate[key] = \"\";\n      } else {\n        infoTemplate[key] = infoModal[key];\n      }\n    }\n    setInfoModal(infoTemplate);\n  }\n  const validationSubmit = () => {\n    for (let key of Object.keys(infoModal)) {\n      if (infoModal[key] === \"\") {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  const save = () => {\n    if (validationSubmit()) {\n      saveTask(infoModal);\n    } else {\n      alert('You cannot save because some fields are left empty')\n    }\n  }\n\n  const checkTitleSelected = (element) => {\n    if (infoModal[element] === '' && isTitleSelected) {\n      return true;\n    }\n    return false;\n  }\n  const checkDescriptionSelected = (element) => {\n    if (infoModal[element] === \"\" && isDescriptionSelected) {\n      return true;\n    }\n    return false;\n  }\n  const checkStoryPointsSelected = (element) => {\n    if (infoModal[element] === \"\" && isStoryPointsSelected) {\n      return true;\n    }\n    return false;\n  }\n\n  return (\n    <>\n      <Modal\n        show={show}\n        onHide={handleClose}\n        backdrop=\"static\"\n        keyboard={false}\n        className='ModalNewNote'\n      >\n        <Modal.Header closeButton>\n          <Modal.Title >\n            <p className='display-6 text-dark text-center'>New Note </p>\n          </Modal.Title>\n        </Modal.Header>\n\n        <Modal.Body>\n          <form >\n            <div className=\"form-group row\">\n              <label htmlFor=\"inputEmail3\" className=\"col-sm-2 col-form-label\">Title</label>\n              <div className=\"col-sm-10\" >\n                <input\n                  value={infoModal.title}\n                  onChange={((e) => updateElement({ title: e.target.value.toUpperCase() }))}\n                  type=\"text\"\n                  className=\"form-control\"\n                  id=\"inputEmail3\" />\n                {\n                  checkTitleSelected(TITLE) && (\n                    <div className=\"alert alert-danger\" role=\"alert\">\n                      Title cannot be empty\n                    </div>\n                  )\n                }\n              </div>\n            </div>\n            <div className=\"form-group row\">\n              <label htmlFor=\"inputPassword3\" className=\"col-sm-2 col-form-label\">Description</label>\n              <div className=\"col-sm-10\">\n                <textarea\n                  value={infoModal.description}\n                  onChange={((e) => updateElement({ description: e.target.value }))}\n                  type=\"text\"\n                  className=\"form-control\" id=\"inputPassword3\" />\n                {\n                  checkDescriptionSelected(DESCRIPTION) && (\n                    <div className=\"alert alert-danger\" role=\"alert\">\n                      Description cannot be empty\n                    </div>\n                  )\n                }\n              </div>\n            </div>\n\n            <div className=\"form-group\">\n              <label htmlFor=\"exampleFormControlSelect1\">Praise Points</label>\n              <select\n                className=\"form-control\" id=\"exampleFormControlSelect1\"\n                value={infoModal.storyPoints}\n                onChange={((e) => updateElement({ storyPoints: e.target.value }))}\n                onClick={() => setStoryPointsSelected(true)}>\n                <option value=\"\">choose how many points</option>\n                <option>1</option>\n                <option>2</option>\n                <option>3</option>\n                <option>4</option>\n                <option>5</option>\n              </select>\n              {\n                checkStoryPointsSelected(STORY_POINTS) && (\n                  <div className=\"alert alert-danger\" role=\"alert\">\n                    Praise Points cannot be empty!\n                  </div>\n                )\n              }\n            </div>\n            <Button type='submit' variant=\"success\" className='aling-rigth' onClick={() => save()}>Save</Button>\n          </form>\n        </Modal.Body>\n\n\n      </Modal>\n    </>\n  )\n};\n\nexport default ModalNewTask\n","import React, { useContext } from 'react';\nimport './Menu.css'\nimport { TasksContext } from '../Context/ContextTasks'\nimport { useHistory } from 'react-router-dom'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport ModalNewTask from './Modal/ModalNewTask'\n\n\nfunction Menu() {\n  // we import the statates that we are going to use from context\n  const { setShow } = useContext(TasksContext);\n  const history = useHistory()\n\n\n  const AbrirModal = () => {\n    setShow(true)\n  }\n\n  return (\n    <>\n      <div className=\" container-fluid  \">\n        <div className='row text-center shadow-lg p-3  bg-trasparent rounded containermenu '>\n\n          <div className='col-12'>\n            <div className='row containerMenuIcon'>\n              <div id='IconMenu' className=' text-center col-sm-12 col-md-6 col-lg-6 col-lg-6 col-xl-6 p-0'>\n                <div className=' p-0'>\n                  <svg width=\"2.5em\" height=\"2.5em\" viewBox=\"0 0 16 16\" className=\"bi bi-list p-0 text-white\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <path fillRule=\"evenodd\" d=\"M2.5 11.5A.5.5 0 0 1 3 11h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5zm0-4A.5.5 0 0 1 3 7h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5zm0-4A.5.5 0 0 1 3 3h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5z\" />\n                  </svg>\n                </div>\n              </div>\n              <div id='IconMenu' className=' col-sm-12 col-md-6 col-lg-6 col-lg-6 col-xl-6 p-0'>\n                <div className=\"d-none d-md-block text-white mt-2 text-left \"><b>MENU</b></div>\n              </div>\n            </div>\n          </div>\n\n          <div className='col-12'>\n            <div onClick={AbrirModal} className='row containerNewTaskIcon'>\n              <div id='IconNewTask' className=' text-center col-sm-12 col-md-6 col-lg-6 col-lg-6 col-xl-6 p-0'>\n                <button className='btn text-dark p-0 ' type=\"button\" data-toggle=\"modal\" data-target=\"#staticBackdrop\">\n                  <svg width=\"2.5em\" height=\"2.5em\" viewBox=\"0 0 16 16\" className=\"bi bi-plus-square-fill text-white\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <path fillRule=\"evenodd\" d=\"M2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2zm6.5 4a.5.5 0 0 0-1 0v3.5H4a.5.5 0 0 0 0 1h3.5V12a.5.5 0 0 0 1 0V8.5H12a.5.5 0 0 0 0-1H8.5V4z\" />\n                  </svg>\n                </button>\n              </div>\n              <div id='IconNewTask' className=' col-sm-12 col-md-6 col-lg-6 col-lg-6 col-xl-6 p-0'>\n                <div className=\"d-none d-md-block text-white mt-2 text-left \"><b>NEW TASK</b></div>\n              </div>\n            </div>\n          </div>\n\n          <div className='col-12'>\n            <div onClick={() => history.push('/DashBoard')} className='row  containerDashBoardIcon'>\n              <div id='IconDashBoard' className=' text-center col-sm-12 col-md-6 col-lg-6 col-lg-6 col-xl-6 p-0'>\n                <button className='btn text-dark p-0'>\n                  <svg width=\"2.5em\" height=\"2.5em\" viewBox=\"0 0 16 16\" className=\"bi bi-grid-3x3-gap-fill text-white\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <path d=\"M1 2a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V2zm5 0a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1H7a1 1 0 0 1-1-1V2zm5 0a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1h-2a1 1 0 0 1-1-1V2zM1 7a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V7zm5 0a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1H7a1 1 0 0 1-1-1V7zm5 0a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1h-2a1 1 0 0 1-1-1V7zM1 12a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1v-2zm5 0a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1H7a1 1 0 0 1-1-1v-2zm5 0a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1h-2a1 1 0 0 1-1-1v-2z\" />\n                  </svg>\n                </button>\n              </div>\n              <div id='IconDashBoard' className=' col-sm-12 col-md-6 col-lg-6 col-lg-6 col-xl-6 p-0'>\n                <div className=\"d-none d-md-block text-white mt-2 text-left \"><b>DASHBOARD</b></div>\n              </div>\n            </div>\n          </div>\n\n          <div className='col-12'>\n            <div onClick={() => history.push('/ToDoTasks')} className='row containerToDoIcon'>\n              <div id='IconToDo' className=' text-center col-sm-12 col-md-6 col-lg-6 col-lg-6 col-xl-6 p-0'>\n                <button className='btn text-dark p-0'>\n                  <svg width=\"2.5em\" height=\"2.5em\" viewBox=\"0 0 16 16\" className=\"bi bi-list-check text-white\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <path fillRule=\"evenodd\" d=\"M5 11.5a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5zm0-4a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5zm0-4a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5zM3.854 2.146a.5.5 0 0 1 0 .708l-1.5 1.5a.5.5 0 0 1-.708 0l-.5-.5a.5.5 0 1 1 .708-.708L2 3.293l1.146-1.147a.5.5 0 0 1 .708 0zm0 4a.5.5 0 0 1 0 .708l-1.5 1.5a.5.5 0 0 1-.708 0l-.5-.5a.5.5 0 1 1 .708-.708L2 7.293l1.146-1.147a.5.5 0 0 1 .708 0zm0 4a.5.5 0 0 1 0 .708l-1.5 1.5a.5.5 0 0 1-.708 0l-.5-.5a.5.5 0 0 1 .708-.708l.146.147 1.146-1.147a.5.5 0 0 1 .708 0z\" />\n                  </svg>\n                </button>\n              </div>\n              <div id='IconToDo' className=' col-sm-12 col-md-6 col-lg-6 col-lg-6 col-xl-6 p-0'>\n                <div className=\"d-none d-md-block text-white mt-2 text-left \"><b>TO DO</b></div>\n              </div>\n            </div>\n          </div>\n\n          <div className='col-12'>\n            <div onClick={() => history.push('/DoneTasks')} className='row containerDoneIcon'>\n              <div id='IconDone' className=' text-center col-sm-12 col-md-6 col-lg-6 col-lg-6 col-xl-6 p-0'>\n                <button className='btn text-dark p-0'>\n                  <svg width=\"2.5em\" height=\"2.5em\" viewBox=\"0 0 16 16\" className=\"bi bi-check2-square text-white\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <path fillRule=\"evenodd\" d=\"M15.354 2.646a.5.5 0 0 1 0 .708l-7 7a.5.5 0 0 1-.708 0l-3-3a.5.5 0 1 1 .708-.708L8 9.293l6.646-6.647a.5.5 0 0 1 .708 0z\" />\n                    <path fillRule=\"evenodd\" d=\"M1.5 13A1.5 1.5 0 0 0 3 14.5h10a1.5 1.5 0 0 0 1.5-1.5V8a.5.5 0 0 0-1 0v5a.5.5 0 0 1-.5.5H3a.5.5 0 0 1-.5-.5V3a.5.5 0 0 1 .5-.5h8a.5.5 0 0 0 0-1H3A1.5 1.5 0 0 0 1.5 3v10z\" />\n                  </svg>\n                </button>\n              </div>\n              <div id='IconDone' className=' col-sm-12 col-md-6 col-lg-6 col-lg-6 col-xl-6 p-0'>\n                <div className=\"d-none d-md-block text-white mt-2 text-left \"><b>DONE</b></div>\n              </div>\n            </div>\n          </div>\n\n        </div>\n\n        <ModalNewTask />\n\n      </div>\n    </>\n  );\n}\n\nexport default Menu;\n","import React from 'react';\nimport './NavBar.css'\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nfunction NavBar() {\n  return (\n    <>\n      <div className=\"container-fluid bg-light  ml-0 mr-3  shadow-sm p-3   rounded navBar\">\n        <h1 className='text-center taskManagertxt ' > Task Manager </h1>\n      </div>\n    </>\n  );\n}\n\nexport default NavBar;\n","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Menu from '../Menu/Menu'\nimport NavBar from '../NavBar/NavBar'\n\n\n\nfunction OptionsNavbarComponents() {\n  return (\n    <>\n      <div className='container-fluid bg-white RootContainer'>\n        <div className='row  principalrow'>\n          <div className='col-2 mr-0 p-0 fixed-top menuP '>\n            <Menu />\n          </div>\n          <div className='col-10 containerNavAndTask'>\n            <div className='row fixed-top navs '>\n              <NavBar />\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default OptionsNavbarComponents;\n","import React from 'react';\nimport './PrincipalView.css'\nimport ToDoList from '../ContainerTasks/ToDo/ToDo'\nimport OptionNavBarComponents from './OptionNavbarComponents'\nimport './TodoTaskView.css'\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nfunction TodoList() {\n  return (\n    <>\n      <OptionNavBarComponents />\n      <div className='col-12 TodoViewcontainer'>\n        <div className='row '>\n          <ToDoList />\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default TodoList;\n","import React from 'react';\nimport { getAllMatchesTasks } from '../../Menu/LocalStorageCRUD'\nimport { STATUS_DONE } from '../../../constants'\nimport CardTask from '../CardTask/CardTask'\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction DoneList() {\n\n  const doneTasks = getAllMatchesTasks({ status: STATUS_DONE })\n\n  return (\n    <>\n      <div className='row col-6 bg-light py-1 mt-4 ml-1 mr-2 titleTask pl-0 ' >\n        <h1 className='lead '> DONE</h1>\n      </div>\n      <div className=\"container mt-4  \">\n        <div className='row '>\n          {\n            doneTasks.length > 0 && doneTasks.map(task => (\n              <div key={task.title} className='col-sm-8 col-md-6 col-lg-6 col-xl-6 mt-3 '>\n                <CardTask task={task} />\n              </div>\n\n            ))\n          }\n        </div>\n      </div>\n      <div className=\"container-fluid mt-4 hola\">\n        {\n          doneTasks.length === 0 && (\n            <div className=\"alert alert-warning \" role=\"alert\">\n              <b>DONE </b> section is empty!\n            </div>\n          )\n        }\n      </div>\n\n\n    </>\n  );\n}\n\nexport default DoneList;\n\n","import React from 'react';\nimport './DoneTaskView.css'\nimport DoneList from '../ContainerTasks/Done/Done'\nimport OptionNavBarComponents from './OptionNavbarComponents'\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nfunction DoneTaskView() {\n  return (\n    <>\n      <OptionNavBarComponents />\n      <div className='col-12 DoneViewcontainer'>\n        <div className='row '>\n          <DoneList />\n        </div>\n      </div>\n\n    </>\n  );\n}\n\nexport default DoneTaskView;\n\n\n","import React from 'react';\nimport './PrincipalView.css';\nimport OptionNavBarComponents from '../Views/OptionNavbarComponents';\nimport ToDoList from '../ContainerTasks/ToDo/ToDo';\nimport DoneList from '../ContainerTasks/Done/Done';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nfunction PrincipalView() {\n  return (\n    <>\n      <OptionNavBarComponents />\n      <div className='row containerTask '>\n        <div className='col-12 p-0 mr-5'>\n          <ToDoList />\n        </div>\n        <div className='col-12 p-0 '>\n          <DoneList />\n        </div>\n      </div>\n\n    </>\n  );\n}\n\nexport default PrincipalView;\n\n\n","import React from 'react';\nimport { TasksContextProvider } from './Components/Context/ContextTasks'\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport ToDoTasks from './Components/Views/TodoTasksView'\nimport DoneTasks from './Components/Views/DoneTasksView'\nimport PrincipalView from './Components/Views/PrincipalView'\n\n\nfunction App() {\n  return (\n    <>\n      <TasksContextProvider>\n        <Router>\n          <Switch>\n            <Route exact path='/' component={() => < PrincipalView />} />\n            <Route exact path='/DashBoard' component={() => <  PrincipalView />} />\n            <Route exact path='/ToDoTasks' component={() => < ToDoTasks />} />\n            <Route exact path='/DoneTasks' component={() => <DoneTasks />} />\n          </Switch>\n        </Router >\n      </TasksContextProvider>\n    </>\n  );\n}\n\nexport default App;\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}